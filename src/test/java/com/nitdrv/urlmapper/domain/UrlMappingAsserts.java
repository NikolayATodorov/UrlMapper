package com.nitdrv.urlmapper.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UrlMappingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUrlMappingAllPropertiesEquals(UrlMapping expected, UrlMapping actual) {
        assertUrlMappingAutoGeneratedPropertiesEquals(expected, actual);
        assertUrlMappingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUrlMappingAllUpdatablePropertiesEquals(UrlMapping expected, UrlMapping actual) {
        assertUrlMappingUpdatableFieldsEquals(expected, actual);
        assertUrlMappingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUrlMappingAutoGeneratedPropertiesEquals(UrlMapping expected, UrlMapping actual) {
        assertThat(expected)
            .as("Verify UrlMapping auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUrlMappingUpdatableFieldsEquals(UrlMapping expected, UrlMapping actual) {
        assertThat(expected)
            .as("Verify UrlMapping relevant properties")
            .satisfies(e -> assertThat(e.getOriginalUrl()).as("check originalUrl").isEqualTo(actual.getOriginalUrl()))
            .satisfies(e -> assertThat(e.getTtl()).as("check ttl").isEqualTo(actual.getTtl()))
            .satisfies(e -> assertThat(e.getCreationTimestamp()).as("check creationTimestamp").isEqualTo(actual.getCreationTimestamp()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUrlMappingUpdatableRelationshipsEquals(UrlMapping expected, UrlMapping actual) {}
}
